import './kotlin/clientsdk-clientcore_js';
import { Json as InternalJson } from './utils/JsonUtils';
import { Member } from './utils';
declare module './kotlin/clientsdk-clientcore_js' {
    type Json = InternalJson;
    namespace vonage {
        interface CombinedClientJS {
            /**
             * Mute your leg of a call
             *
             * @example
             * [[include: snippet_Mute.txt]]
             *
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            mute(callId: string): Promise<void>;
            /**
             * Unmute your leg of a call
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            unmute(callId: string): Promise<void>;
            /**
             * Earmuff your leg of a call
             *
             * @example
             * [[include: snippet_EnableEarmuff.txt]]
             *
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            enableEarmuff(callId: string): Promise<void>;
            /**
             * Unearmuff your leg of a call
             *
             * @example
             * [[include: snippet_DisableEarmuff.txt]]
             *
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            disableEarmuff(callId: string): Promise<void>;
            /**
             * Send a string of digits to a call via DTMF
             *
             * @example
             * [[include: snippet_Dtmf.txt]]
             *
             * @param callId - Call ID
             * @param digits - DTMF digits
             * @returns void
             * @group Voice
             */
            sendDTMF(callId: string, digits: string): Promise<void>;
            /**
             * Answer a call
             *
             * @example
             * [[include: snippet_AnswerCall.txt]]
             *
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            answer(callId: string): Promise<void>;
            /**
             * Reject a call
             *
             * @example
             * [[include: snippet_RejectCall.txt]]
             *
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            reject(callId: string): Promise<void>;
            /**
             * Reconnect a call
             *
             * @example
             * [[include: snippet_ReconnectCall.txt]]
             *
             * @param callId - Call ID
             * @returns void
             * @group Voice
             */
            reconnectCall(callId: string): Promise<void>;
            /**
             * Get a Member of a Conversation
             *
             * @example
             * [[include: snippet_GetConversationMember.txt]]
             *
             * @group Chat
             * @param cid - the Conversation's id
             * @param mid - the Member's id
             * @returns the `Member`
             */
            getConversationMember(cid: string, mid: string): Promise<Member>;
        }
    }
}
